package com.example.macos.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BLUE_TOOTH_DATA".
*/
public class BlueToothDataDao extends AbstractDao<BlueToothData, Long> {

    public static final String TABLENAME = "BLUE_TOOTH_DATA";

    /**
     * Properties of entity BlueToothData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property InputID = new Property(1, String.class, "inputID", false, "INPUT_ID");
        public final static Property Time = new Property(2, String.class, "time", false, "TIME");
        public final static Property LatValue = new Property(3, Double.class, "latValue", false, "LAT_VALUE");
        public final static Property LongValue = new Property(4, Double.class, "longValue", false, "LONG_VALUE");
        public final static Property ZValue = new Property(5, Long.class, "zValue", false, "Z_VALUE");
        public final static Property IsUploaded = new Property(6, Boolean.class, "isUploaded", false, "IS_UPLOADED");
    };


    public BlueToothDataDao(DaoConfig config) {
        super(config);
    }
    
    public BlueToothDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BLUE_TOOTH_DATA\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"INPUT_ID\" TEXT," + // 1: inputID
                "\"TIME\" TEXT," + // 2: time
                "\"LAT_VALUE\" REAL," + // 3: latValue
                "\"LONG_VALUE\" REAL," + // 4: longValue
                "\"Z_VALUE\" INTEGER," + // 5: zValue
                "\"IS_UPLOADED\" INTEGER);"); // 6: isUploaded
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BLUE_TOOTH_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BlueToothData entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String inputID = entity.getInputID();
        if (inputID != null) {
            stmt.bindString(2, inputID);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        Double latValue = entity.getLatValue();
        if (latValue != null) {
            stmt.bindDouble(4, latValue);
        }
 
        Double longValue = entity.getLongValue();
        if (longValue != null) {
            stmt.bindDouble(5, longValue);
        }
 
        Long zValue = entity.getZValue();
        if (zValue != null) {
            stmt.bindLong(6, zValue);
        }
 
        Boolean isUploaded = entity.getIsUploaded();
        if (isUploaded != null) {
            stmt.bindLong(7, isUploaded ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BlueToothData readEntity(Cursor cursor, int offset) {
        BlueToothData entity = new BlueToothData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // inputID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // latValue
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // longValue
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // zValue
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // isUploaded
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BlueToothData entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setInputID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLatValue(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setLongValue(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setZValue(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setIsUploaded(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BlueToothData entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BlueToothData entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
