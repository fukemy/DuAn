package com.example.macos.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "BLUE_TOOTH_DATA".
*/
public class BlueToothDataDao extends AbstractDao<BlueToothData, Void> {

    public static final String TABLENAME = "BLUE_TOOTH_DATA";

    /**
     * Properties of entity BlueToothData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", false, "ID");
        public final static Property RoadId = new Property(1, Integer.class, "RoadId", false, "ROAD_ID");
        public final static Property DateTimeLoging = new Property(2, String.class, "DateTimeLoging", false, "DATE_TIME_LOGING");
        public final static Property Latitude = new Property(3, String.class, "Latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(4, String.class, "Longitude", false, "LONGITUDE");
        public final static Property ZaxisValue = new Property(5, Double.class, "ZaxisValue", false, "ZAXIS_VALUE");
        public final static Property UserLoging = new Property(6, String.class, "UserLoging", false, "USER_LOGING");
    };


    public BlueToothDataDao(DaoConfig config) {
        super(config);
    }
    
    public BlueToothDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BLUE_TOOTH_DATA\" (" + //
                "\"ID\" TEXT," + // 0: Id
                "\"ROAD_ID\" INTEGER," + // 1: RoadId
                "\"DATE_TIME_LOGING\" TEXT," + // 2: DateTimeLoging
                "\"LATITUDE\" TEXT," + // 3: Latitude
                "\"LONGITUDE\" TEXT," + // 4: Longitude
                "\"ZAXIS_VALUE\" REAL," + // 5: ZaxisValue
                "\"USER_LOGING\" TEXT);"); // 6: UserLoging
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BLUE_TOOTH_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BlueToothData entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        Integer RoadId = entity.getRoadId();
        if (RoadId != null) {
            stmt.bindLong(2, RoadId);
        }
 
        String DateTimeLoging = entity.getDateTimeLoging();
        if (DateTimeLoging != null) {
            stmt.bindString(3, DateTimeLoging);
        }
 
        String Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindString(4, Latitude);
        }
 
        String Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindString(5, Longitude);
        }
 
        Double ZaxisValue = entity.getZaxisValue();
        if (ZaxisValue != null) {
            stmt.bindDouble(6, ZaxisValue);
        }
 
        String UserLoging = entity.getUserLoging();
        if (UserLoging != null) {
            stmt.bindString(7, UserLoging);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public BlueToothData readEntity(Cursor cursor, int offset) {
        BlueToothData entity = new BlueToothData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // RoadId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DateTimeLoging
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Latitude
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Longitude
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // ZaxisValue
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // UserLoging
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BlueToothData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRoadId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDateTimeLoging(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLatitude(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLongitude(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZaxisValue(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setUserLoging(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(BlueToothData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(BlueToothData entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
