package com.example.macos.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POSITION_DATA".
*/
public class PositionDataDao extends AbstractDao<PositionData, Void> {

    public static final String TABLENAME = "POSITION_DATA";

    /**
     * Properties of entity PositionData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", false, "ID");
        public final static Property UserName = new Property(1, String.class, "UserName", false, "USER_NAME");
        public final static Property LogTime = new Property(2, String.class, "LogTime", false, "LOG_TIME");
        public final static Property Lattitude = new Property(3, String.class, "Lattitude", false, "LATTITUDE");
        public final static Property Longitude = new Property(4, String.class, "Longitude", false, "LONGITUDE");
    };


    public PositionDataDao(DaoConfig config) {
        super(config);
    }
    
    public PositionDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POSITION_DATA\" (" + //
                "\"ID\" TEXT," + // 0: Id
                "\"USER_NAME\" TEXT," + // 1: UserName
                "\"LOG_TIME\" TEXT," + // 2: LogTime
                "\"LATTITUDE\" TEXT," + // 3: Lattitude
                "\"LONGITUDE\" TEXT);"); // 4: Longitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POSITION_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PositionData entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(2, UserName);
        }
 
        String LogTime = entity.getLogTime();
        if (LogTime != null) {
            stmt.bindString(3, LogTime);
        }
 
        String Lattitude = entity.getLattitude();
        if (Lattitude != null) {
            stmt.bindString(4, Lattitude);
        }
 
        String Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindString(5, Longitude);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public PositionData readEntity(Cursor cursor, int offset) {
        PositionData entity = new PositionData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UserName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // LogTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Lattitude
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // Longitude
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PositionData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLogTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLattitude(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLongitude(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(PositionData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(PositionData entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
